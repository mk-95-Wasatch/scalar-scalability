#!/bin/csh -f
#______________________________________________________________________
#  This script parses the output file from sus and 
#  generates a data file used for scaling plots
#  
#  is used with export SCI_DEBUG=MPIStats:+
#
#  It also computes the mean time for a hypre solve 
# 
#  usage:
#      extractMPIStats  <sus_output.1, sus_output_2, sus_output_3 >
#  
#______________________________________________________________________

if ( $#argv < 1 ) then
  echo "    Usage:  extractMPIStatsData  <sus_output.1, sus_output_2, sus_output_3 >"
  exit
endif

#__________________________________
# DEFAULTS:  Edit these: 
# if end timestep <= start timestep  all the out doc will be parsed.
# otherwise the parsing will stop at tend
set startTimestep = "1"
set endTimestep   = "1"           # timestep to extract elapsed time from.
#__________________________________

set out = ($argv)

# make work directory
set here = .tmpFiles
/bin/rm  -rf $here  >& /dev/null
mkdir $here
touch $here/data

set these = `grep --files-with-matches "TaskExec" $out`

if ( $#these != 0 ) then
  
  foreach X ( $out[*] )
    
    # grab the endTimestep value 
    if ($endTimestep <= $startTimestep) then
        set endTimestep=`grep "Timestep " $X | tail -1 | awk -F " " '{print $2}' | tr -d "[:alpha:]" ` 
    endif
    echo $endTimestep > $here/endTimestep

    grep "Timestep $startTimestep " $X | awk -F "=" '{print $4}' | tr -d "[:alpha:]" > $here/startTime
    grep "Timestep $endTimestep "   $X | awk -F "=" '{print $4}' | tr -d "[:alpha:]" > $here/endTime

    @ timesteps =  $endTimestep - $startTimestep
    echo $timesteps > $here/timesteps

    grep -q "Time: Recv:" $X

    if ($status == 0 ) then
      grep -q "Timestep $endTimestep " $X

      # if the final timestep exists then process it
      if ($status == 0 ) then  
        echo $X > $here/file

        @ procs    = `grep "MPI processes" $X | awk '{print $2}'`
        @ threads  = `grep "threads per MPI process" $X | awk '{print $2}'`
        @ nThreads = $procs * $threads

        echo $procs    > $here/nMPI
        echo $threads  > $here/threadsPerMPI
        echo $nThreads > $here/nThreads

        # extract the output between the start and ending timesteps
        @ endingTimestep = $endTimestep + 1
        sed -n /"Timestep $startTimestep "/,/"Timestep $endingTimestep "/p $X > $here/out.clean

        set me = $here/out.clean
        grep "Time: Recv:" $me   | cut -d:  -f3 | awk 'BEGIN {sum=0}; {if ($2 == "ms") {sum= sum + $1 * 0.001;} else if ($2 == "s") {sum=sum+$1;}}; END {print sum}'  > $here/total.mpiRecv
        grep "Time: Recv:" $me   | cut -d:  -f3 | awk 'BEGIN {sum=0}; {if ($2 == "ms") {sum= sum + $1 * 0.001;} else if ($2 == "s") {sum=sum+$1;}}; END {print sum/NR}'  > $here/ave.mpiRecv

        grep "Time: Redu:" $me   | cut -d:  -f3 | awk 'BEGIN {sum=0}; {if ($2 == "ms") {sum= sum + $1 * 0.001;} else if ($2 == "s") {sum=sum+$1;}}; END {print sum}'  > $here/total.mpiReduction
        grep "Time: Redu:" $me   | cut -d:  -f3 | awk 'BEGIN {sum=0}; {if ($2 == "ms") {sum= sum + $1 * 0.001;} else if ($2 == "s") {sum=sum+$1;}}; END {print sum/NR}'  > $here/ave.mpiReduction

        grep "Time: Send:" $me   | cut -d:  -f3 | awk 'BEGIN {sum=0}; {if ($2 == "ms") {sum= sum + $1 * 0.001;} else if ($2 == "s") {sum=sum+$1;}}; END {print sum}'  > $here/total.mpiSend
        grep "Time: Send:" $me   | cut -d:  -f3 | awk 'BEGIN {sum=0}; {if ($2 == "ms") {sum= sum + $1 * 0.001;} else if ($2 == "s") {sum=sum+$1;}}; END {print sum/NR}'  > $here/ave.mpiSend

        grep "Time: Wait:" $me   | cut -d:  -f3 | awk 'BEGIN {sum=0}; {if ($2 == "ms") {sum= sum + $1 * 0.001;} else if ($2 == "s") {sum=sum+$1;}}; END {print sum}'  > $here/total.allMPIWait   # this takes the sum over all timesteps of the sum of all the waits per step. 
        grep "Time: Wait:" $me   | cut -d:  -f3 | awk 'BEGIN {sum=0}; {if ($2 == "ms") {sum= sum + $1 * 0.001;} else if ($2 == "s") {sum=sum+$1;}}; END {print sum/NR}'  > $here/ave.allMPIWait  # this takes the average over all timesteps of the sum of all the waits per step.

        paste -d " " $here/file $here/nMPI $here/threadsPerMPI $here/nThreads $here/timesteps $here/startTime $here/endTime $here/total.mpiRecv $here/total.mpiSend $here/total.allMPIWait $here/total.mpiReduction $here/ave.mpiRecv $here/ave.mpiSend $here/ave.allMPIWait $here/ave.mpiReduction >> $here/mpiTimes
      else
        echo "---------------------$X did not run to completion"
      endif
    endif   # 
  end  # loop over files

    #  header
    echo "#file MPIprocs threadsPerMPI totalThreads timesteps startTime endTime totalMPIRecv totalMPISend totalAllMPIWait totalMPIReduction aveMPIRecv aveMPISend aveAllMPIWait aveMPIReduction" > $here/mpiTimes2
  sort -n -k2 $here/mpiTimes >>  $here/mpiTimes2
  column -t $here/mpiTimes2 > mpiTimes

  more mpiTimes
endif


/bin/rm -rf $here
exit